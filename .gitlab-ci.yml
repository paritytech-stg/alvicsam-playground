stages:
  - build
  - test
  - deploy
  - publish

variables:
  CI_IMAGE: "paritytech/tools:latest"
  TEST_GLOBAL_VAR: "lalala"

default:
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  interruptible: true
  before_script:
    - echo "Collecting env variables for the cancel-pipeline job"
    - echo "FAILED_JOB_URL=${CI_JOB_URL}" > pipeline-stopper.env
    - echo "FAILED_JOB_NAME=${CI_JOB_NAME}" >> pipeline-stopper.env
    - echo "PR_NUM=${CI_COMMIT_REF_NAME}" >> pipeline-stopper.env

.kubernetes-env:
  image: $CI_IMAGE
  artifacts:
    reports:
      dotenv: pipeline-stopper.env
  tags:
    - kubernetes-parity-build

.test-refs:
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/ # PRs
    - if: $CI_COMMIT_REF_NAME =~ /^gh-readonly-queue.*$/ # merge queues
    - if: $CI_COMMIT_REF_NAME =~ /^release-parachains-v[0-9]+\.[0-9]+.*$/ # i.e. v1.0, v2.1rc1

build-job:
  stage: build
  extends:
    - .kubernetes-env
    - .test-refs
  variables:
    TEST_LOCAL_VAR: "ololo"
  script:
    - echo $TEST_GLOBAL_VAR
    - echo $TEST_LOCAL_VAR
    - sleep 30
    - export PRNUM=$CI_COMMIT_BRANCH
    - export BRANCHNAME=$(curl -s https://api.github.com/repos/tripleightech/alvicsam-playground/pulls/$PRNUM | jq '.head.ref')
    - echo $BRANCHNAME
    - ls -la

tests:
  stage: test
  extends: .kubernetes-env
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/ # PRs
    - if: $CI_COMMIT_REF_NAME == "master"
  script:
    - echo "run always (but not with tags)"
    - sleep 30

fail_queue:
  stage: test
  extends:
    - .kubernetes-env
    - .test-refs
  script:
    - sleep 30
    # fail job on gh-readonly-queue.* branch
    - echo $CI_COMMIT_REF_NAME
    - echo $CI_COMMIT_REF_NAME | grep gh-readonly-queue && exit 1
    - exit 0

pass_queue:
  stage: test
  extends:
    - .kubernetes-env
    - .test-refs
  script:
    - sleep 30
    # fail job on gh-readonly-queue.* branch
    - echo $CI_COMMIT_REF_NAME
    - echo $CI_COMMIT_REF_NAME | grep gh-readonly-queue && sleep 60
    - exit 0

deploy:
  stage: deploy
  extends:
    - .kubernetes-env
    - .test-refs
  script:
    - sleep 30

publish-dry-run:
  stage: publish
  extends: .kubernetes-env
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/ # PRs
  script:
    - echo "run only in PR"

publish-crate:
  stage: publish
  extends: .kubernetes-env
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^v.[0-9]+\.[0-9]+.*$/ # i.e. v.1.0, v.2.1rc1
  script:
    - echo "run only when tag/release is set"

.cancel-pipeline-template:
  stage: .post
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/ # PRs
      when: on_failure
    - if: $CI_COMMIT_REF_NAME =~ /^gh-readonly-queue.*$/ # merge queues
      when: on_failure
  variables:
    PROJECT_ID: "${CI_PROJECT_ID}"
    PROJECT_NAME: "${CI_PROJECT_NAME}"
    PIPELINE_ID: "${CI_PIPELINE_ID}"
    FAILED_JOB_URL: "${FAILED_JOB_URL}"
    FAILED_JOB_NAME: "${FAILED_JOB_NAME}"
    PR_NUM: "${PR_NUM}"
  trigger:
    project: "parity/infrastructure/ci_cd/pipeline-stopper"

remove-cancel-pipeline-message:
  stage: .post
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/ # PRs
    - if: $CI_COMMIT_REF_NAME =~ /^gh-readonly-queue.*$/ # merge queues
  variables:
    PROJECT_ID: "${CI_PROJECT_ID}"
    PROJECT_NAME: "${CI_PROJECT_NAME}"
    PIPELINE_ID: "${CI_PIPELINE_ID}"
    FAILED_JOB_URL: "https://gitlab.com"
    FAILED_JOB_NAME: "nope"
    PR_NUM: "${CI_COMMIT_REF_NAME}"
  trigger:
    project: "parity/infrastructure/ci_cd/pipeline-stopper"
# need to copy jobs this way because otherwise gitlab will wait
# for all 3 jobs to finish instead of cancelling if one fails
cancel-pipeline-fail_queue:
  extends: .cancel-pipeline-template
  needs:
    - job: "fail_queue"
